<?php
/**
 * InlineResponse20010
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InlineResponse20010 Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20010 implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_10';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'status' => 'string',
        'id' => 'int',
        'addons' => '\Swagger\Client\Model\Addon[]',
        'decimal_price' => 'string',
        'boatroom_id' => 'int',
        'package_decimal_price' => 'string',
        'course_decimal_price' => 'string',
        'ticket_decimal_price' => 'string',
        'packagefacade_id' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'status' => 'status',
        'id' => 'id',
        'addons' => 'addons',
        'decimal_price' => 'decimal_price',
        'boatroom_id' => 'boatroom_id',
        'package_decimal_price' => 'package_decimal_price',
        'course_decimal_price' => 'course_decimal_price',
        'ticket_decimal_price' => 'ticket_decimal_price',
        'packagefacade_id' => 'packagefacade_id'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'status' => 'setStatus',
        'id' => 'setId',
        'addons' => 'setAddons',
        'decimal_price' => 'setDecimalPrice',
        'boatroom_id' => 'setBoatroomId',
        'package_decimal_price' => 'setPackageDecimalPrice',
        'course_decimal_price' => 'setCourseDecimalPrice',
        'ticket_decimal_price' => 'setTicketDecimalPrice',
        'packagefacade_id' => 'setPackagefacadeId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'status' => 'getStatus',
        'id' => 'getId',
        'addons' => 'getAddons',
        'decimal_price' => 'getDecimalPrice',
        'boatroom_id' => 'getBoatroomId',
        'package_decimal_price' => 'getPackageDecimalPrice',
        'course_decimal_price' => 'getCourseDecimalPrice',
        'ticket_decimal_price' => 'getTicketDecimalPrice',
        'packagefacade_id' => 'getPackagefacadeId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['addons'] = isset($data['addons']) ? $data['addons'] : null;
        $this->container['decimal_price'] = isset($data['decimal_price']) ? $data['decimal_price'] : null;
        $this->container['boatroom_id'] = isset($data['boatroom_id']) ? $data['boatroom_id'] : null;
        $this->container['package_decimal_price'] = isset($data['package_decimal_price']) ? $data['package_decimal_price'] : null;
        $this->container['course_decimal_price'] = isset($data['course_decimal_price']) ? $data['course_decimal_price'] : null;
        $this->container['ticket_decimal_price'] = isset($data['ticket_decimal_price']) ? $data['ticket_decimal_price'] : null;
        $this->container['packagefacade_id'] = isset($data['packagefacade_id']) ? $data['packagefacade_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets addons
     * @return \Swagger\Client\Model\Addon[]
     */
    public function getAddons()
    {
        return $this->container['addons'];
    }

    /**
     * Sets addons
     * @param \Swagger\Client\Model\Addon[] $addons
     * @return $this
     */
    public function setAddons($addons)
    {
        $this->container['addons'] = $addons;

        return $this;
    }

    /**
     * Gets decimal_price
     * @return string
     */
    public function getDecimalPrice()
    {
        return $this->container['decimal_price'];
    }

    /**
     * Sets decimal_price
     * @param string $decimal_price
     * @return $this
     */
    public function setDecimalPrice($decimal_price)
    {
        $this->container['decimal_price'] = $decimal_price;

        return $this;
    }

    /**
     * Gets boatroom_id
     * @return int
     */
    public function getBoatroomId()
    {
        return $this->container['boatroom_id'];
    }

    /**
     * Sets boatroom_id
     * @param int $boatroom_id
     * @return $this
     */
    public function setBoatroomId($boatroom_id)
    {
        $this->container['boatroom_id'] = $boatroom_id;

        return $this;
    }

    /**
     * Gets package_decimal_price
     * @return string
     */
    public function getPackageDecimalPrice()
    {
        return $this->container['package_decimal_price'];
    }

    /**
     * Sets package_decimal_price
     * @param string $package_decimal_price
     * @return $this
     */
    public function setPackageDecimalPrice($package_decimal_price)
    {
        $this->container['package_decimal_price'] = $package_decimal_price;

        return $this;
    }

    /**
     * Gets course_decimal_price
     * @return string
     */
    public function getCourseDecimalPrice()
    {
        return $this->container['course_decimal_price'];
    }

    /**
     * Sets course_decimal_price
     * @param string $course_decimal_price
     * @return $this
     */
    public function setCourseDecimalPrice($course_decimal_price)
    {
        $this->container['course_decimal_price'] = $course_decimal_price;

        return $this;
    }

    /**
     * Gets ticket_decimal_price
     * @return string
     */
    public function getTicketDecimalPrice()
    {
        return $this->container['ticket_decimal_price'];
    }

    /**
     * Sets ticket_decimal_price
     * @param string $ticket_decimal_price
     * @return $this
     */
    public function setTicketDecimalPrice($ticket_decimal_price)
    {
        $this->container['ticket_decimal_price'] = $ticket_decimal_price;

        return $this;
    }

    /**
     * Gets packagefacade_id
     * @return string
     */
    public function getPackagefacadeId()
    {
        return $this->container['packagefacade_id'];
    }

    /**
     * Sets packagefacade_id
     * @param string $packagefacade_id
     * @return $this
     */
    public function setPackagefacadeId($packagefacade_id)
    {
        $this->container['packagefacade_id'] = $packagefacade_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


