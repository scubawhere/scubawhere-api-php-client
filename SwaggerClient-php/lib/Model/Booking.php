<?php
/**
 * Booking
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Booking Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Booking implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Booking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'reference' => 'string',
        'lead_customer_id' => 'int',
        'agent_id' => 'int',
        'agent_reference' => 'string',
        'source' => 'string',
        'price' => 'int',
        'discount' => 'int',
        'status' => 'string',
        'reserved_until' => '\DateTime',
        'cancellation_fee' => 'int',
        'comment' => 'string',
        'parent_id' => 'int',
        'decimal_price' => 'string',
        'real_decimal_price' => 'string',
        'arrival_date' => '\DateTime',
        'created_at_local' => '\DateTime',
        'lead_customer' => '\Swagger\Client\Model\Customer',
        'payments' => '\Swagger\Client\Model\Payment[]',
        'refunds' => '\Swagger\Client\Model\Refund[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'reference' => 'reference',
        'lead_customer_id' => 'lead_customer_id',
        'agent_id' => 'agent_id',
        'agent_reference' => 'agent_reference',
        'source' => 'source',
        'price' => 'price',
        'discount' => 'discount',
        'status' => 'status',
        'reserved_until' => 'reserved_until',
        'cancellation_fee' => 'cancellation_fee',
        'comment' => 'comment',
        'parent_id' => 'parent_id',
        'decimal_price' => 'decimal_price',
        'real_decimal_price' => 'real_decimal_price',
        'arrival_date' => 'arrival_date',
        'created_at_local' => 'created_at_local',
        'lead_customer' => 'lead_customer',
        'payments' => 'payments',
        'refunds' => 'refunds'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'reference' => 'setReference',
        'lead_customer_id' => 'setLeadCustomerId',
        'agent_id' => 'setAgentId',
        'agent_reference' => 'setAgentReference',
        'source' => 'setSource',
        'price' => 'setPrice',
        'discount' => 'setDiscount',
        'status' => 'setStatus',
        'reserved_until' => 'setReservedUntil',
        'cancellation_fee' => 'setCancellationFee',
        'comment' => 'setComment',
        'parent_id' => 'setParentId',
        'decimal_price' => 'setDecimalPrice',
        'real_decimal_price' => 'setRealDecimalPrice',
        'arrival_date' => 'setArrivalDate',
        'created_at_local' => 'setCreatedAtLocal',
        'lead_customer' => 'setLeadCustomer',
        'payments' => 'setPayments',
        'refunds' => 'setRefunds'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'reference' => 'getReference',
        'lead_customer_id' => 'getLeadCustomerId',
        'agent_id' => 'getAgentId',
        'agent_reference' => 'getAgentReference',
        'source' => 'getSource',
        'price' => 'getPrice',
        'discount' => 'getDiscount',
        'status' => 'getStatus',
        'reserved_until' => 'getReservedUntil',
        'cancellation_fee' => 'getCancellationFee',
        'comment' => 'getComment',
        'parent_id' => 'getParentId',
        'decimal_price' => 'getDecimalPrice',
        'real_decimal_price' => 'getRealDecimalPrice',
        'arrival_date' => 'getArrivalDate',
        'created_at_local' => 'getCreatedAtLocal',
        'lead_customer' => 'getLeadCustomer',
        'payments' => 'getPayments',
        'refunds' => 'getRefunds'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['lead_customer_id'] = isset($data['lead_customer_id']) ? $data['lead_customer_id'] : null;
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['agent_reference'] = isset($data['agent_reference']) ? $data['agent_reference'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['reserved_until'] = isset($data['reserved_until']) ? $data['reserved_until'] : null;
        $this->container['cancellation_fee'] = isset($data['cancellation_fee']) ? $data['cancellation_fee'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['decimal_price'] = isset($data['decimal_price']) ? $data['decimal_price'] : null;
        $this->container['real_decimal_price'] = isset($data['real_decimal_price']) ? $data['real_decimal_price'] : null;
        $this->container['arrival_date'] = isset($data['arrival_date']) ? $data['arrival_date'] : null;
        $this->container['created_at_local'] = isset($data['created_at_local']) ? $data['created_at_local'] : null;
        $this->container['lead_customer'] = isset($data['lead_customer']) ? $data['lead_customer'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['refunds'] = isset($data['refunds']) ? $data['refunds'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reference
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     * @param string $reference
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets lead_customer_id
     * @return int
     */
    public function getLeadCustomerId()
    {
        return $this->container['lead_customer_id'];
    }

    /**
     * Sets lead_customer_id
     * @param int $lead_customer_id
     * @return $this
     */
    public function setLeadCustomerId($lead_customer_id)
    {
        $this->container['lead_customer_id'] = $lead_customer_id;

        return $this;
    }

    /**
     * Gets agent_id
     * @return int
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     * @param int $agent_id
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets agent_reference
     * @return string
     */
    public function getAgentReference()
    {
        return $this->container['agent_reference'];
    }

    /**
     * Sets agent_reference
     * @param string $agent_reference
     * @return $this
     */
    public function setAgentReference($agent_reference)
    {
        $this->container['agent_reference'] = $agent_reference;

        return $this;
    }

    /**
     * Gets source
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     * @param string $source
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets price
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param int $price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets discount
     * @return int
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     * @param int $discount
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets reserved_until
     * @return \DateTime
     */
    public function getReservedUntil()
    {
        return $this->container['reserved_until'];
    }

    /**
     * Sets reserved_until
     * @param \DateTime $reserved_until
     * @return $this
     */
    public function setReservedUntil($reserved_until)
    {
        $this->container['reserved_until'] = $reserved_until;

        return $this;
    }

    /**
     * Gets cancellation_fee
     * @return int
     */
    public function getCancellationFee()
    {
        return $this->container['cancellation_fee'];
    }

    /**
     * Sets cancellation_fee
     * @param int $cancellation_fee
     * @return $this
     */
    public function setCancellationFee($cancellation_fee)
    {
        $this->container['cancellation_fee'] = $cancellation_fee;

        return $this;
    }

    /**
     * Gets comment
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     * @param string $comment
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets parent_id
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     * @param int $parent_id
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets decimal_price
     * @return string
     */
    public function getDecimalPrice()
    {
        return $this->container['decimal_price'];
    }

    /**
     * Sets decimal_price
     * @param string $decimal_price
     * @return $this
     */
    public function setDecimalPrice($decimal_price)
    {
        $this->container['decimal_price'] = $decimal_price;

        return $this;
    }

    /**
     * Gets real_decimal_price
     * @return string
     */
    public function getRealDecimalPrice()
    {
        return $this->container['real_decimal_price'];
    }

    /**
     * Sets real_decimal_price
     * @param string $real_decimal_price
     * @return $this
     */
    public function setRealDecimalPrice($real_decimal_price)
    {
        $this->container['real_decimal_price'] = $real_decimal_price;

        return $this;
    }

    /**
     * Gets arrival_date
     * @return \DateTime
     */
    public function getArrivalDate()
    {
        return $this->container['arrival_date'];
    }

    /**
     * Sets arrival_date
     * @param \DateTime $arrival_date
     * @return $this
     */
    public function setArrivalDate($arrival_date)
    {
        $this->container['arrival_date'] = $arrival_date;

        return $this;
    }

    /**
     * Gets created_at_local
     * @return \DateTime
     */
    public function getCreatedAtLocal()
    {
        return $this->container['created_at_local'];
    }

    /**
     * Sets created_at_local
     * @param \DateTime $created_at_local
     * @return $this
     */
    public function setCreatedAtLocal($created_at_local)
    {
        $this->container['created_at_local'] = $created_at_local;

        return $this;
    }

    /**
     * Gets lead_customer
     * @return \Swagger\Client\Model\Customer
     */
    public function getLeadCustomer()
    {
        return $this->container['lead_customer'];
    }

    /**
     * Sets lead_customer
     * @param \Swagger\Client\Model\Customer $lead_customer
     * @return $this
     */
    public function setLeadCustomer($lead_customer)
    {
        $this->container['lead_customer'] = $lead_customer;

        return $this;
    }

    /**
     * Gets payments
     * @return \Swagger\Client\Model\Payment[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     * @param \Swagger\Client\Model\Payment[] $payments
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets refunds
     * @return \Swagger\Client\Model\Refund[]
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     * @param \Swagger\Client\Model\Refund[] $refunds
     * @return $this
     */
    public function setRefunds($refunds)
    {
        $this->container['refunds'] = $refunds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


