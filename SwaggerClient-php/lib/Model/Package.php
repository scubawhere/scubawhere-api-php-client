<?php
/**
 * Package
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Package Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Package implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Package';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'available_from' => '\DateTime',
        'available_until' => '\DateTime',
        'decimal_price' => 'string',
        'trips' => '\Swagger\Client\Model\Ticket[]',
        'courses' => '\Swagger\Client\Model\Course[]',
        'accommodations' => '\Swagger\Client\Model\Accommodation[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'available_from' => 'available_from',
        'available_until' => 'available_until',
        'decimal_price' => 'decimal_price',
        'trips' => 'trips',
        'courses' => 'courses',
        'accommodations' => 'accommodations'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'available_from' => 'setAvailableFrom',
        'available_until' => 'setAvailableUntil',
        'decimal_price' => 'setDecimalPrice',
        'trips' => 'setTrips',
        'courses' => 'setCourses',
        'accommodations' => 'setAccommodations'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'available_from' => 'getAvailableFrom',
        'available_until' => 'getAvailableUntil',
        'decimal_price' => 'getDecimalPrice',
        'trips' => 'getTrips',
        'courses' => 'getCourses',
        'accommodations' => 'getAccommodations'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['available_from'] = isset($data['available_from']) ? $data['available_from'] : null;
        $this->container['available_until'] = isset($data['available_until']) ? $data['available_until'] : null;
        $this->container['decimal_price'] = isset($data['decimal_price']) ? $data['decimal_price'] : null;
        $this->container['trips'] = isset($data['trips']) ? $data['trips'] : null;
        $this->container['courses'] = isset($data['courses']) ? $data['courses'] : null;
        $this->container['accommodations'] = isset($data['accommodations']) ? $data['accommodations'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets available_from
     * @return \DateTime
     */
    public function getAvailableFrom()
    {
        return $this->container['available_from'];
    }

    /**
     * Sets available_from
     * @param \DateTime $available_from
     * @return $this
     */
    public function setAvailableFrom($available_from)
    {
        $this->container['available_from'] = $available_from;

        return $this;
    }

    /**
     * Gets available_until
     * @return \DateTime
     */
    public function getAvailableUntil()
    {
        return $this->container['available_until'];
    }

    /**
     * Sets available_until
     * @param \DateTime $available_until
     * @return $this
     */
    public function setAvailableUntil($available_until)
    {
        $this->container['available_until'] = $available_until;

        return $this;
    }

    /**
     * Gets decimal_price
     * @return string
     */
    public function getDecimalPrice()
    {
        return $this->container['decimal_price'];
    }

    /**
     * Sets decimal_price
     * @param string $decimal_price
     * @return $this
     */
    public function setDecimalPrice($decimal_price)
    {
        $this->container['decimal_price'] = $decimal_price;

        return $this;
    }

    /**
     * Gets trips
     * @return \Swagger\Client\Model\Ticket[]
     */
    public function getTrips()
    {
        return $this->container['trips'];
    }

    /**
     * Sets trips
     * @param \Swagger\Client\Model\Ticket[] $trips
     * @return $this
     */
    public function setTrips($trips)
    {
        $this->container['trips'] = $trips;

        return $this;
    }

    /**
     * Gets courses
     * @return \Swagger\Client\Model\Course[]
     */
    public function getCourses()
    {
        return $this->container['courses'];
    }

    /**
     * Sets courses
     * @param \Swagger\Client\Model\Course[] $courses
     * @return $this
     */
    public function setCourses($courses)
    {
        $this->container['courses'] = $courses;

        return $this;
    }

    /**
     * Gets accommodations
     * @return \Swagger\Client\Model\Accommodation[]
     */
    public function getAccommodations()
    {
        return $this->container['accommodations'];
    }

    /**
     * Sets accommodations
     * @param \Swagger\Client\Model\Accommodation[] $accommodations
     * @return $this
     */
    public function setAccommodations($accommodations)
    {
        $this->container['accommodations'] = $accommodations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


