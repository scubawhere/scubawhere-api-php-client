<?php
/**
 * Agent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Agent Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Agent implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Agent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'website' => 'string',
        'branch_name' => 'string',
        'branch_address' => 'string',
        'branch_phone' => 'string',
        'branch_email' => 'string',
        'billing_address' => 'string',
        'billing_phone' => 'string',
        'billing_email' => 'string',
        'commission' => 'double',
        'terms' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'website' => 'website',
        'branch_name' => 'branch_name',
        'branch_address' => 'branch_address',
        'branch_phone' => 'branch_phone',
        'branch_email' => 'branch_email',
        'billing_address' => 'billing_address',
        'billing_phone' => 'billing_phone',
        'billing_email' => 'billing_email',
        'commission' => 'commission',
        'terms' => 'terms'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'website' => 'setWebsite',
        'branch_name' => 'setBranchName',
        'branch_address' => 'setBranchAddress',
        'branch_phone' => 'setBranchPhone',
        'branch_email' => 'setBranchEmail',
        'billing_address' => 'setBillingAddress',
        'billing_phone' => 'setBillingPhone',
        'billing_email' => 'setBillingEmail',
        'commission' => 'setCommission',
        'terms' => 'setTerms'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'website' => 'getWebsite',
        'branch_name' => 'getBranchName',
        'branch_address' => 'getBranchAddress',
        'branch_phone' => 'getBranchPhone',
        'branch_email' => 'getBranchEmail',
        'billing_address' => 'getBillingAddress',
        'billing_phone' => 'getBillingPhone',
        'billing_email' => 'getBillingEmail',
        'commission' => 'getCommission',
        'terms' => 'getTerms'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['branch_name'] = isset($data['branch_name']) ? $data['branch_name'] : null;
        $this->container['branch_address'] = isset($data['branch_address']) ? $data['branch_address'] : null;
        $this->container['branch_phone'] = isset($data['branch_phone']) ? $data['branch_phone'] : null;
        $this->container['branch_email'] = isset($data['branch_email']) ? $data['branch_email'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['billing_phone'] = isset($data['billing_phone']) ? $data['billing_phone'] : null;
        $this->container['billing_email'] = isset($data['billing_email']) ? $data['billing_email'] : null;
        $this->container['commission'] = isset($data['commission']) ? $data['commission'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets website
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     * @param string $website
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets branch_name
     * @return string
     */
    public function getBranchName()
    {
        return $this->container['branch_name'];
    }

    /**
     * Sets branch_name
     * @param string $branch_name
     * @return $this
     */
    public function setBranchName($branch_name)
    {
        $this->container['branch_name'] = $branch_name;

        return $this;
    }

    /**
     * Gets branch_address
     * @return string
     */
    public function getBranchAddress()
    {
        return $this->container['branch_address'];
    }

    /**
     * Sets branch_address
     * @param string $branch_address
     * @return $this
     */
    public function setBranchAddress($branch_address)
    {
        $this->container['branch_address'] = $branch_address;

        return $this;
    }

    /**
     * Gets branch_phone
     * @return string
     */
    public function getBranchPhone()
    {
        return $this->container['branch_phone'];
    }

    /**
     * Sets branch_phone
     * @param string $branch_phone
     * @return $this
     */
    public function setBranchPhone($branch_phone)
    {
        $this->container['branch_phone'] = $branch_phone;

        return $this;
    }

    /**
     * Gets branch_email
     * @return string
     */
    public function getBranchEmail()
    {
        return $this->container['branch_email'];
    }

    /**
     * Sets branch_email
     * @param string $branch_email
     * @return $this
     */
    public function setBranchEmail($branch_email)
    {
        $this->container['branch_email'] = $branch_email;

        return $this;
    }

    /**
     * Gets billing_address
     * @return string
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     * @param string $billing_address
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets billing_phone
     * @return string
     */
    public function getBillingPhone()
    {
        return $this->container['billing_phone'];
    }

    /**
     * Sets billing_phone
     * @param string $billing_phone
     * @return $this
     */
    public function setBillingPhone($billing_phone)
    {
        $this->container['billing_phone'] = $billing_phone;

        return $this;
    }

    /**
     * Gets billing_email
     * @return string
     */
    public function getBillingEmail()
    {
        return $this->container['billing_email'];
    }

    /**
     * Sets billing_email
     * @param string $billing_email
     * @return $this
     */
    public function setBillingEmail($billing_email)
    {
        $this->container['billing_email'] = $billing_email;

        return $this;
    }

    /**
     * Gets commission
     * @return double
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     * @param double $commission
     * @return $this
     */
    public function setCommission($commission)
    {
        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets terms
     * @return string
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     * @param string $terms
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


