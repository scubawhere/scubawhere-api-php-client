<?php
/**
 * CourseApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * CourseApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CourseApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://dev.scubawhere.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CourseApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createCourse
     *
     * Create a new course
     *
     * @param string $name  (required)
     * @param string $description  (required)
     * @param int $capacity  (required)
     * @param double[] $prices  (required)
     * @param int $certificate_id  (optional)
     * @param int[] $tickets  (optional)
     * @param int[] $trainings  (optional)
     * @return \Swagger\Client\Model\InlineResponse20027
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createCourse($name, $description, $capacity, $prices, $certificate_id = null, $tickets = null, $trainings = null)
    {
        list($response) = $this->createCourseWithHttpInfo($name, $description, $capacity, $prices, $certificate_id, $tickets, $trainings);
        return $response;
    }

    /**
     * Operation createCourseWithHttpInfo
     *
     * Create a new course
     *
     * @param string $name  (required)
     * @param string $description  (required)
     * @param int $capacity  (required)
     * @param double[] $prices  (required)
     * @param int $certificate_id  (optional)
     * @param int[] $tickets  (optional)
     * @param int[] $trainings  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20027, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createCourseWithHttpInfo($name, $description, $capacity, $prices, $certificate_id = null, $tickets = null, $trainings = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createCourse');
        }
        // verify the required parameter 'description' is set
        if ($description === null) {
            throw new \InvalidArgumentException('Missing the required parameter $description when calling createCourse');
        }
        // verify the required parameter 'capacity' is set
        if ($capacity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $capacity when calling createCourse');
        }
        // verify the required parameter 'prices' is set
        if ($prices === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prices when calling createCourse');
        }
        // parse inputs
        $resourcePath = "/course/add";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($capacity !== null) {
            $queryParams['capacity'] = $this->apiClient->getSerializer()->toQueryValue($capacity);
        }
        // query params
        if ($certificate_id !== null) {
            $queryParams['certificate_id'] = $this->apiClient->getSerializer()->toQueryValue($certificate_id);
        }
        // query params
        if (is_array($tickets)) {
            $tickets = $this->apiClient->getSerializer()->serializeCollection($tickets, 'multi', true);
        }
        if ($tickets !== null) {
            $queryParams['tickets'] = $this->apiClient->getSerializer()->toQueryValue($tickets);
        }
        // query params
        if (is_array($trainings)) {
            $trainings = $this->apiClient->getSerializer()->serializeCollection($trainings, 'multi', true);
        }
        if ($trainings !== null) {
            $queryParams['trainings'] = $this->apiClient->getSerializer()->toQueryValue($trainings);
        }
        // query params
        if (is_array($prices)) {
            $prices = $this->apiClient->getSerializer()->serializeCollection($prices, 'multi', true);
        }
        if ($prices !== null) {
            $queryParams['prices'] = $this->apiClient->getSerializer()->toQueryValue($prices);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20027',
                '/course/add'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20027', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20027', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCourse
     *
     * Delete a course by ID
     *
     * @param int $id  (required)
     * @return \Swagger\Client\Model\InlineResponse2003
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteCourse($id)
    {
        list($response) = $this->deleteCourseWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteCourseWithHttpInfo
     *
     * Delete a course by ID
     *
     * @param int $id  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteCourseWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteCourse');
        }
        // parse inputs
        $resourcePath = "/course/delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/course/delete'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation editCourse
     *
     * Update a course by ID
     *
     * @param int $id  (required)
     * @param string $name  (required)
     * @param string $description  (required)
     * @param int $capacity  (required)
     * @param int $certificate_id  (optional)
     * @param int[] $tickets  (optional)
     * @param int[] $trainings  (optional)
     * @return \Swagger\Client\Model\InlineResponse20028
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function editCourse($id, $name, $description, $capacity, $certificate_id = null, $tickets = null, $trainings = null)
    {
        list($response) = $this->editCourseWithHttpInfo($id, $name, $description, $capacity, $certificate_id, $tickets, $trainings);
        return $response;
    }

    /**
     * Operation editCourseWithHttpInfo
     *
     * Update a course by ID
     *
     * @param int $id  (required)
     * @param string $name  (required)
     * @param string $description  (required)
     * @param int $capacity  (required)
     * @param int $certificate_id  (optional)
     * @param int[] $tickets  (optional)
     * @param int[] $trainings  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20028, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function editCourseWithHttpInfo($id, $name, $description, $capacity, $certificate_id = null, $tickets = null, $trainings = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling editCourse');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling editCourse');
        }
        // verify the required parameter 'description' is set
        if ($description === null) {
            throw new \InvalidArgumentException('Missing the required parameter $description when calling editCourse');
        }
        // verify the required parameter 'capacity' is set
        if ($capacity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $capacity when calling editCourse');
        }
        // parse inputs
        $resourcePath = "/course/edit";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($capacity !== null) {
            $queryParams['capacity'] = $this->apiClient->getSerializer()->toQueryValue($capacity);
        }
        // query params
        if ($certificate_id !== null) {
            $queryParams['certificate_id'] = $this->apiClient->getSerializer()->toQueryValue($certificate_id);
        }
        // query params
        if (is_array($tickets)) {
            $tickets = $this->apiClient->getSerializer()->serializeCollection($tickets, 'multi', true);
        }
        if ($tickets !== null) {
            $queryParams['tickets'] = $this->apiClient->getSerializer()->toQueryValue($tickets);
        }
        // query params
        if (is_array($trainings)) {
            $trainings = $this->apiClient->getSerializer()->serializeCollection($trainings, 'multi', true);
        }
        if ($trainings !== null) {
            $queryParams['trainings'] = $this->apiClient->getSerializer()->toQueryValue($trainings);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20028',
                '/course/edit'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20028', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20028', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllCourses
     *
     * Retrieve all courses including any deleted models
     *
     * @return \Swagger\Client\Model\Course[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllCourses()
    {
        list($response) = $this->getAllCoursesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllCoursesWithHttpInfo
     *
     * Retrieve all courses including any deleted models
     *
     * @return Array of \Swagger\Client\Model\Course[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllCoursesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/course/all";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Course[]',
                '/course/all'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Course[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Course[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllWithTrashedCourses
     *
     * Retrieve all courses including any deleted models
     *
     * @return \Swagger\Client\Model\Course[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithTrashedCourses()
    {
        list($response) = $this->getAllWithTrashedCoursesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllWithTrashedCoursesWithHttpInfo
     *
     * Retrieve all courses including any deleted models
     *
     * @return Array of \Swagger\Client\Model\Course[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithTrashedCoursesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/course/all-with-trashed";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Course[]',
                '/course/all-with-trashed'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Course[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Course[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCourse
     *
     * Retrieve a course by ID
     *
     * @param int $id  (optional)
     * @return \Swagger\Client\Model\InlineResponse20027
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCourse($id = null)
    {
        list($response) = $this->getCourseWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCourseWithHttpInfo
     *
     * Retrieve a course by ID
     *
     * @param int $id  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20027, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCourseWithHttpInfo($id = null)
    {
        // parse inputs
        $resourcePath = "/course";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20027',
                '/course'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20027', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20027', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
