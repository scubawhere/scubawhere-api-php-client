<?php
/**
 * TicketApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * TicketApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TicketApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://dev.scubawhere.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return TicketApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addTicket
     *
     * Create a new ticket
     *
     * @param string $name  (required)
     * @param int[] $trips  (required)
     * @param \Swagger\Client\Model\BasePrice $prices  (required)
     * @param string $description  (optional)
     * @param \DateTime $available_from  (optional)
     * @param \DateTime $available_until  (optional)
     * @param bool $only_packaged  (optional)
     * @param int[] $boats  (optional)
     * @param int[] $boatrooms  (optional)
     * @return \Swagger\Client\Model\InlineResponse2014
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addTicket($name, $trips, $prices, $description = null, $available_from = null, $available_until = null, $only_packaged = null, $boats = null, $boatrooms = null)
    {
        list($response) = $this->addTicketWithHttpInfo($name, $trips, $prices, $description, $available_from, $available_until, $only_packaged, $boats, $boatrooms);
        return $response;
    }

    /**
     * Operation addTicketWithHttpInfo
     *
     * Create a new ticket
     *
     * @param string $name  (required)
     * @param int[] $trips  (required)
     * @param \Swagger\Client\Model\BasePrice $prices  (required)
     * @param string $description  (optional)
     * @param \DateTime $available_from  (optional)
     * @param \DateTime $available_until  (optional)
     * @param bool $only_packaged  (optional)
     * @param int[] $boats  (optional)
     * @param int[] $boatrooms  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2014, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addTicketWithHttpInfo($name, $trips, $prices, $description = null, $available_from = null, $available_until = null, $only_packaged = null, $boats = null, $boatrooms = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling addTicket');
        }
        // verify the required parameter 'trips' is set
        if ($trips === null) {
            throw new \InvalidArgumentException('Missing the required parameter $trips when calling addTicket');
        }
        // verify the required parameter 'prices' is set
        if ($prices === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prices when calling addTicket');
        }
        // parse inputs
        $resourcePath = "/ticket/add";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($available_from !== null) {
            $queryParams['available_from'] = $this->apiClient->getSerializer()->toQueryValue($available_from);
        }
        // query params
        if ($available_until !== null) {
            $queryParams['available_until'] = $this->apiClient->getSerializer()->toQueryValue($available_until);
        }
        // query params
        if ($only_packaged !== null) {
            $queryParams['only_packaged'] = $this->apiClient->getSerializer()->toQueryValue($only_packaged);
        }
        // query params
        if (is_array($trips)) {
            $trips = $this->apiClient->getSerializer()->serializeCollection($trips, 'multi', true);
        }
        if ($trips !== null) {
            $queryParams['trips'] = $this->apiClient->getSerializer()->toQueryValue($trips);
        }
        // query params
        if (is_array($boats)) {
            $boats = $this->apiClient->getSerializer()->serializeCollection($boats, 'multi', true);
        }
        if ($boats !== null) {
            $queryParams['boats'] = $this->apiClient->getSerializer()->toQueryValue($boats);
        }
        // query params
        if (is_array($boatrooms)) {
            $boatrooms = $this->apiClient->getSerializer()->serializeCollection($boatrooms, 'multi', true);
        }
        if ($boatrooms !== null) {
            $queryParams['boatrooms'] = $this->apiClient->getSerializer()->toQueryValue($boatrooms);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($prices)) {
            $_tempBody = $prices;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2014',
                '/ticket/add'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2014', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2014', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTicket
     *
     * Delete a ticket
     *
     * @param string $name  (required)
     * @return \Swagger\Client\Model\InlineResponse2014
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteTicket($name)
    {
        list($response) = $this->deleteTicketWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation deleteTicketWithHttpInfo
     *
     * Delete a ticket
     *
     * @param string $name  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse2014, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteTicketWithHttpInfo($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteTicket');
        }
        // parse inputs
        $resourcePath = "/ticket/delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2014',
                '/ticket/delete'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2014', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2014', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation editTicket
     *
     * Update an existing ticket
     *
     * @param int $id  (required)
     * @param string $name  (required)
     * @param int[] $trips  (required)
     * @param \Swagger\Client\Model\BasePrice $prices  (required)
     * @param string $description  (optional)
     * @param \DateTime $available_from  (optional)
     * @param \DateTime $available_until  (optional)
     * @param bool $only_packaged  (optional)
     * @param int[] $boats  (optional)
     * @param int[] $boatrooms  (optional)
     * @return \Swagger\Client\Model\InlineResponse2014
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function editTicket($id, $name, $trips, $prices, $description = null, $available_from = null, $available_until = null, $only_packaged = null, $boats = null, $boatrooms = null)
    {
        list($response) = $this->editTicketWithHttpInfo($id, $name, $trips, $prices, $description, $available_from, $available_until, $only_packaged, $boats, $boatrooms);
        return $response;
    }

    /**
     * Operation editTicketWithHttpInfo
     *
     * Update an existing ticket
     *
     * @param int $id  (required)
     * @param string $name  (required)
     * @param int[] $trips  (required)
     * @param \Swagger\Client\Model\BasePrice $prices  (required)
     * @param string $description  (optional)
     * @param \DateTime $available_from  (optional)
     * @param \DateTime $available_until  (optional)
     * @param bool $only_packaged  (optional)
     * @param int[] $boats  (optional)
     * @param int[] $boatrooms  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2014, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function editTicketWithHttpInfo($id, $name, $trips, $prices, $description = null, $available_from = null, $available_until = null, $only_packaged = null, $boats = null, $boatrooms = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling editTicket');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling editTicket');
        }
        // verify the required parameter 'trips' is set
        if ($trips === null) {
            throw new \InvalidArgumentException('Missing the required parameter $trips when calling editTicket');
        }
        // verify the required parameter 'prices' is set
        if ($prices === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prices when calling editTicket');
        }
        // parse inputs
        $resourcePath = "/ticket/edit";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($available_from !== null) {
            $queryParams['available_from'] = $this->apiClient->getSerializer()->toQueryValue($available_from);
        }
        // query params
        if ($available_until !== null) {
            $queryParams['available_until'] = $this->apiClient->getSerializer()->toQueryValue($available_until);
        }
        // query params
        if ($only_packaged !== null) {
            $queryParams['only_packaged'] = $this->apiClient->getSerializer()->toQueryValue($only_packaged);
        }
        // query params
        if (is_array($trips)) {
            $trips = $this->apiClient->getSerializer()->serializeCollection($trips, 'multi', true);
        }
        if ($trips !== null) {
            $queryParams['trips'] = $this->apiClient->getSerializer()->toQueryValue($trips);
        }
        // query params
        if (is_array($boats)) {
            $boats = $this->apiClient->getSerializer()->serializeCollection($boats, 'multi', true);
        }
        if ($boats !== null) {
            $queryParams['boats'] = $this->apiClient->getSerializer()->toQueryValue($boats);
        }
        // query params
        if (is_array($boatrooms)) {
            $boatrooms = $this->apiClient->getSerializer()->serializeCollection($boatrooms, 'multi', true);
        }
        if ($boatrooms !== null) {
            $queryParams['boatrooms'] = $this->apiClient->getSerializer()->toQueryValue($boatrooms);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($prices)) {
            $_tempBody = $prices;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2014',
                '/ticket/edit'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2014', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2014', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllAvailableTickets
     *
     * Retrieve all tickets that are available to booked today
     *
     * @return \Swagger\Client\Model\Ticket[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllAvailableTickets()
    {
        list($response) = $this->getAllAvailableTicketsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllAvailableTicketsWithHttpInfo
     *
     * Retrieve all tickets that are available to booked today
     *
     * @return Array of \Swagger\Client\Model\Ticket[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllAvailableTicketsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/ticket/only-available";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Ticket[]',
                '/ticket/only-available'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Ticket[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Ticket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllTickets
     *
     * Retrieve all tickets
     *
     * @return \Swagger\Client\Model\Ticket[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllTickets()
    {
        list($response) = $this->getAllTicketsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllTicketsWithHttpInfo
     *
     * Retrieve all tickets
     *
     * @return Array of \Swagger\Client\Model\Ticket[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllTicketsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/ticket/all";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Ticket[]',
                '/ticket/all'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Ticket[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Ticket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllWithTrashedTickets
     *
     * Retrieve all tickets
     *
     * @return \Swagger\Client\Model\Ticket[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithTrashedTickets()
    {
        list($response) = $this->getAllWithTrashedTicketsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllWithTrashedTicketsWithHttpInfo
     *
     * Retrieve all tickets
     *
     * @return Array of \Swagger\Client\Model\Ticket[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithTrashedTicketsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/ticket/all-with-trashed";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Ticket[]',
                '/ticket/all-with-trashed'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Ticket[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Ticket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTicket
     *
     * Retrieve a ticket by ID
     *
     * @param int $id  (required)
     * @return \Swagger\Client\Model\Ticket
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTicket($id)
    {
        list($response) = $this->getTicketWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTicketWithHttpInfo
     *
     * Retrieve a ticket by ID
     *
     * @param int $id  (required)
     * @return Array of \Swagger\Client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTicketWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getTicket');
        }
        // parse inputs
        $resourcePath = "/ticket";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Ticket',
                '/ticket'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Ticket', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Ticket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
