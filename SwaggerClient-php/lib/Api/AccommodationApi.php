<?php
/**
 * AccommodationApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AccommodationApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccommodationApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://dev.scubawhere.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AccommodationApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addAccommodation
     *
     * 
     *
     * @param string $name Name of the type of accommodation (required)
     * @param int $capacity Number of beds in the accommodation (required)
     * @param int $base_prices Price of the accommodation and the dates of when the price is applicable (required)
     * @param string $description Description of the accommodation (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addAccommodation($name, $capacity, $base_prices, $description = null)
    {
        list($response) = $this->addAccommodationWithHttpInfo($name, $capacity, $base_prices, $description);
        return $response;
    }

    /**
     * Operation addAccommodationWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the type of accommodation (required)
     * @param int $capacity Number of beds in the accommodation (required)
     * @param int $base_prices Price of the accommodation and the dates of when the price is applicable (required)
     * @param string $description Description of the accommodation (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addAccommodationWithHttpInfo($name, $capacity, $base_prices, $description = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling addAccommodation');
        }
        // verify the required parameter 'capacity' is set
        if ($capacity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $capacity when calling addAccommodation');
        }
        // verify the required parameter 'base_prices' is set
        if ($base_prices === null) {
            throw new \InvalidArgumentException('Missing the required parameter $base_prices when calling addAccommodation');
        }
        // parse inputs
        $resourcePath = "/accommodation/add";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($capacity !== null) {
            $queryParams['capacity'] = $this->apiClient->getSerializer()->toQueryValue($capacity);
        }
        // query params
        if ($base_prices !== null) {
            $queryParams['base_prices'] = $this->apiClient->getSerializer()->toQueryValue($base_prices);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/accommodation/add'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAccommodation
     *
     * Delete an accommodation by ID
     *
     * @param int $body ID of the accommodation (required)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAccommodation($body)
    {
        list($response) = $this->deleteAccommodationWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAccommodationWithHttpInfo
     *
     * Delete an accommodation by ID
     *
     * @param int $body ID of the accommodation (required)
     * @return Array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAccommodationWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteAccommodation');
        }
        // parse inputs
        $resourcePath = "/accommodation/delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($body !== null) {
            $queryParams['body'] = $this->apiClient->getSerializer()->toQueryValue($body);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/accommodation/delete'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation editAgent
     *
     * Create a new agent
     *
     * @param int $id  (required)
     * @param int $name  (required)
     * @param string $branch_name  (required)
     * @param string $branch_address  (required)
     * @param string $branch_phone  (required)
     * @param string $branch_email  (required)
     * @param float $commission  (required)
     * @param string $terms  (required)
     * @param string $website  (optional)
     * @param string $billing_address  (optional)
     * @param string $billing_phone  (optional)
     * @param string $billing_email  (optional)
     * @return \Swagger\Client\Model\InlineResponse2004
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function editAgent($id, $name, $branch_name, $branch_address, $branch_phone, $branch_email, $commission, $terms, $website = null, $billing_address = null, $billing_phone = null, $billing_email = null)
    {
        list($response) = $this->editAgentWithHttpInfo($id, $name, $branch_name, $branch_address, $branch_phone, $branch_email, $commission, $terms, $website, $billing_address, $billing_phone, $billing_email);
        return $response;
    }

    /**
     * Operation editAgentWithHttpInfo
     *
     * Create a new agent
     *
     * @param int $id  (required)
     * @param int $name  (required)
     * @param string $branch_name  (required)
     * @param string $branch_address  (required)
     * @param string $branch_phone  (required)
     * @param string $branch_email  (required)
     * @param float $commission  (required)
     * @param string $terms  (required)
     * @param string $website  (optional)
     * @param string $billing_address  (optional)
     * @param string $billing_phone  (optional)
     * @param string $billing_email  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function editAgentWithHttpInfo($id, $name, $branch_name, $branch_address, $branch_phone, $branch_email, $commission, $terms, $website = null, $billing_address = null, $billing_phone = null, $billing_email = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling editAgent');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling editAgent');
        }
        // verify the required parameter 'branch_name' is set
        if ($branch_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_name when calling editAgent');
        }
        // verify the required parameter 'branch_address' is set
        if ($branch_address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_address when calling editAgent');
        }
        // verify the required parameter 'branch_phone' is set
        if ($branch_phone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_phone when calling editAgent');
        }
        // verify the required parameter 'branch_email' is set
        if ($branch_email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_email when calling editAgent');
        }
        // verify the required parameter 'commission' is set
        if ($commission === null) {
            throw new \InvalidArgumentException('Missing the required parameter $commission when calling editAgent');
        }
        // verify the required parameter 'terms' is set
        if ($terms === null) {
            throw new \InvalidArgumentException('Missing the required parameter $terms when calling editAgent');
        }
        // parse inputs
        $resourcePath = "/agent/edit";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($website !== null) {
            $queryParams['website'] = $this->apiClient->getSerializer()->toQueryValue($website);
        }
        // query params
        if ($branch_name !== null) {
            $queryParams['branch_name'] = $this->apiClient->getSerializer()->toQueryValue($branch_name);
        }
        // query params
        if ($branch_address !== null) {
            $queryParams['branch_address'] = $this->apiClient->getSerializer()->toQueryValue($branch_address);
        }
        // query params
        if ($branch_phone !== null) {
            $queryParams['branch_phone'] = $this->apiClient->getSerializer()->toQueryValue($branch_phone);
        }
        // query params
        if ($branch_email !== null) {
            $queryParams['branch_email'] = $this->apiClient->getSerializer()->toQueryValue($branch_email);
        }
        // query params
        if ($billing_address !== null) {
            $queryParams['billing_address'] = $this->apiClient->getSerializer()->toQueryValue($billing_address);
        }
        // query params
        if ($billing_phone !== null) {
            $queryParams['billing_phone'] = $this->apiClient->getSerializer()->toQueryValue($billing_phone);
        }
        // query params
        if ($billing_email !== null) {
            $queryParams['billing_email'] = $this->apiClient->getSerializer()->toQueryValue($billing_email);
        }
        // query params
        if ($commission !== null) {
            $queryParams['commission'] = $this->apiClient->getSerializer()->toQueryValue($commission);
        }
        // query params
        if ($terms !== null) {
            $queryParams['terms'] = $this->apiClient->getSerializer()->toQueryValue($terms);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2004',
                '/agent/edit'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2004', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation filterAccommodation
     *
     * Get all the accommodations matching a filter
     *
     * @param \DateTime $before The date for the upper boundary of the dates (optional)
     * @param \DateTime $after The date for the lower boundary of the dates (optional)
     * @param int $accommodation_id ID Accommodation to filter by (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function filterAccommodation($before = null, $after = null, $accommodation_id = null)
    {
        list($response) = $this->filterAccommodationWithHttpInfo($before, $after, $accommodation_id);
        return $response;
    }

    /**
     * Operation filterAccommodationWithHttpInfo
     *
     * Get all the accommodations matching a filter
     *
     * @param \DateTime $before The date for the upper boundary of the dates (optional)
     * @param \DateTime $after The date for the lower boundary of the dates (optional)
     * @param int $accommodation_id ID Accommodation to filter by (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function filterAccommodationWithHttpInfo($before = null, $after = null, $accommodation_id = null)
    {
        // parse inputs
        $resourcePath = "/accommodation/filter";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($before !== null) {
            $queryParams['before'] = $this->apiClient->getSerializer()->toQueryValue($before);
        }
        // query params
        if ($after !== null) {
            $queryParams['after'] = $this->apiClient->getSerializer()->toQueryValue($after);
        }
        // query params
        if ($accommodation_id !== null) {
            $queryParams['accommodation_id'] = $this->apiClient->getSerializer()->toQueryValue($accommodation_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/accommodation/filter'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findAccommodation
     *
     * 
     *
     * @param int[] $id ID of the accommodation to be retrieved (required)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function findAccommodation($id)
    {
        list($response) = $this->findAccommodationWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation findAccommodationWithHttpInfo
     *
     * 
     *
     * @param int[] $id ID of the accommodation to be retrieved (required)
     * @return Array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function findAccommodationWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling findAccommodation');
        }
        // parse inputs
        $resourcePath = "/accommodation";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if (is_array($id)) {
            $id = $this->apiClient->getSerializer()->serializeCollection($id, 'multi', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/accommodation'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllAccommodations
     *
     * 
     *
     * @return \Swagger\Client\Model\Accommodation[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllAccommodations()
    {
        list($response) = $this->getAllAccommodationsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllAccommodationsWithHttpInfo
     *
     * 
     *
     * @return Array of \Swagger\Client\Model\Accommodation[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllAccommodationsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/accommodations/all";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Accommodation[]',
                '/accommodations/all'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Accommodation[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Accommodation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllWithTrashedAccommodations
     *
     * Retrieve all accommodation including any deleted models
     *
     * @return \Swagger\Client\Model\Accommodation[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithTrashedAccommodations()
    {
        list($response) = $this->getAllWithTrashedAccommodationsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllWithTrashedAccommodationsWithHttpInfo
     *
     * Retrieve all accommodation including any deleted models
     *
     * @return Array of \Swagger\Client\Model\Accommodation[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithTrashedAccommodationsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/accommodations/all-with-trashed";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Accommodation[]',
                '/accommodations/all-with-trashed'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Accommodation[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Accommodation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAccommodation
     *
     * Update an Accommodation
     *
     * @param int $id ID of the Accommodation to be updated (required)
     * @param string $name Name of the Accommodation (optional)
     * @param int $capacity Number of rooms the accommodation holds (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateAccommodation($id, $name = null, $capacity = null)
    {
        list($response) = $this->updateAccommodationWithHttpInfo($id, $name, $capacity);
        return $response;
    }

    /**
     * Operation updateAccommodationWithHttpInfo
     *
     * Update an Accommodation
     *
     * @param int $id ID of the Accommodation to be updated (required)
     * @param string $name Name of the Accommodation (optional)
     * @param int $capacity Number of rooms the accommodation holds (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateAccommodationWithHttpInfo($id, $name = null, $capacity = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateAccommodation');
        }
        // parse inputs
        $resourcePath = "/accommodation/edit";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($capacity !== null) {
            $queryParams['capacity'] = $this->apiClient->getSerializer()->toQueryValue($capacity);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/accommodation/edit'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
