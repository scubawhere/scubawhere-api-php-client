<?php
/**
 * AgentApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AgentApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgentApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://dev.scubawhere.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AgentApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createAgent
     *
     * Create a new agent
     *
     * @param int $name  (required)
     * @param string $branch_name  (required)
     * @param string $branch_address  (required)
     * @param string $branch_phone  (required)
     * @param string $branch_email  (required)
     * @param float $commission  (required)
     * @param string $terms  (required)
     * @param string $website  (optional)
     * @param string $billing_address  (optional)
     * @param string $billing_phone  (optional)
     * @param string $billing_email  (optional)
     * @return \Swagger\Client\Model\InlineResponse2004
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createAgent($name, $branch_name, $branch_address, $branch_phone, $branch_email, $commission, $terms, $website = null, $billing_address = null, $billing_phone = null, $billing_email = null)
    {
        list($response) = $this->createAgentWithHttpInfo($name, $branch_name, $branch_address, $branch_phone, $branch_email, $commission, $terms, $website, $billing_address, $billing_phone, $billing_email);
        return $response;
    }

    /**
     * Operation createAgentWithHttpInfo
     *
     * Create a new agent
     *
     * @param int $name  (required)
     * @param string $branch_name  (required)
     * @param string $branch_address  (required)
     * @param string $branch_phone  (required)
     * @param string $branch_email  (required)
     * @param float $commission  (required)
     * @param string $terms  (required)
     * @param string $website  (optional)
     * @param string $billing_address  (optional)
     * @param string $billing_phone  (optional)
     * @param string $billing_email  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createAgentWithHttpInfo($name, $branch_name, $branch_address, $branch_phone, $branch_email, $commission, $terms, $website = null, $billing_address = null, $billing_phone = null, $billing_email = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createAgent');
        }
        // verify the required parameter 'branch_name' is set
        if ($branch_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_name when calling createAgent');
        }
        // verify the required parameter 'branch_address' is set
        if ($branch_address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_address when calling createAgent');
        }
        // verify the required parameter 'branch_phone' is set
        if ($branch_phone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_phone when calling createAgent');
        }
        // verify the required parameter 'branch_email' is set
        if ($branch_email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch_email when calling createAgent');
        }
        // verify the required parameter 'commission' is set
        if ($commission === null) {
            throw new \InvalidArgumentException('Missing the required parameter $commission when calling createAgent');
        }
        // verify the required parameter 'terms' is set
        if ($terms === null) {
            throw new \InvalidArgumentException('Missing the required parameter $terms when calling createAgent');
        }
        // parse inputs
        $resourcePath = "/agent/add";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($website !== null) {
            $queryParams['website'] = $this->apiClient->getSerializer()->toQueryValue($website);
        }
        // query params
        if ($branch_name !== null) {
            $queryParams['branch_name'] = $this->apiClient->getSerializer()->toQueryValue($branch_name);
        }
        // query params
        if ($branch_address !== null) {
            $queryParams['branch_address'] = $this->apiClient->getSerializer()->toQueryValue($branch_address);
        }
        // query params
        if ($branch_phone !== null) {
            $queryParams['branch_phone'] = $this->apiClient->getSerializer()->toQueryValue($branch_phone);
        }
        // query params
        if ($branch_email !== null) {
            $queryParams['branch_email'] = $this->apiClient->getSerializer()->toQueryValue($branch_email);
        }
        // query params
        if ($billing_address !== null) {
            $queryParams['billing_address'] = $this->apiClient->getSerializer()->toQueryValue($billing_address);
        }
        // query params
        if ($billing_phone !== null) {
            $queryParams['billing_phone'] = $this->apiClient->getSerializer()->toQueryValue($billing_phone);
        }
        // query params
        if ($billing_email !== null) {
            $queryParams['billing_email'] = $this->apiClient->getSerializer()->toQueryValue($billing_email);
        }
        // query params
        if ($commission !== null) {
            $queryParams['commission'] = $this->apiClient->getSerializer()->toQueryValue($commission);
        }
        // query params
        if ($terms !== null) {
            $queryParams['terms'] = $this->apiClient->getSerializer()->toQueryValue($terms);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2004',
                '/agent/add'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2004', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAgent
     *
     * Delete an agent by ID
     *
     * @param int $id ID of the Agent (required)
     * @return \Swagger\Client\Model\InlineResponse2003
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAgent($id)
    {
        list($response) = $this->deleteAgentWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteAgentWithHttpInfo
     *
     * Delete an agent by ID
     *
     * @param int $id ID of the Agent (required)
     * @return Array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAgentWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteAgent');
        }
        // parse inputs
        $resourcePath = "/agent/delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/agent/delete'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAgent
     *
     * Retrieve an agent by ID
     *
     * @param int $id ID of the agent to be retrieved (required)
     * @return \Swagger\Client\Model\InlineResponse2004
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAgent($id)
    {
        list($response) = $this->getAgentWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getAgentWithHttpInfo
     *
     * Retrieve an agent by ID
     *
     * @param int $id ID of the agent to be retrieved (required)
     * @return Array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAgentWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAgent');
        }
        // parse inputs
        $resourcePath = "/agent";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2004',
                '/agent'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2004', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllAgents
     *
     * Retrieve all agents
     *
     * @return \Swagger\Client\Model\Agent[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllAgents()
    {
        list($response) = $this->getAllAgentsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllAgentsWithHttpInfo
     *
     * Retrieve all agents
     *
     * @return Array of \Swagger\Client\Model\Agent[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllAgentsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/agent/all";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Agent[]',
                '/agent/all'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Agent[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Agent[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllWithTrashedAgents
     *
     * Retrieve all agents including any deleted models
     *
     * @return \Swagger\Client\Model\Agent[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithTrashedAgents()
    {
        list($response) = $this->getAllWithTrashedAgentsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllWithTrashedAgentsWithHttpInfo
     *
     * Retrieve all agents including any deleted models
     *
     * @return Array of \Swagger\Client\Model\Agent[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithTrashedAgentsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/agent/all-with-trashed";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Agent[]',
                '/agent/all-with-trashed'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Agent[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Agent[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
