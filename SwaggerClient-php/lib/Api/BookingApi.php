<?php
/**
 * BookingApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * BookingApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BookingApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://dev.scubawhere.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return BookingApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addBookingDetail
     *
     * Add a package / course / ticket with its session to the booking
     *
     * @param int $booking_id  (required)
     * @param int $customer_id  (required)
     * @param int $ticket_id  (optional)
     * @param int $session_id  (optional)
     * @param int $boatroom_id  (optional)
     * @param int $training_session_id  (optional)
     * @param bool $temporary  (optional)
     * @param int $package_id  (optional)
     * @param int $packagefacade_id  (optional)
     * @param int $course_id  (optional)
     * @return \Swagger\Client\Model\InlineResponse20010
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addBookingDetail($booking_id, $customer_id, $ticket_id = null, $session_id = null, $boatroom_id = null, $training_session_id = null, $temporary = null, $package_id = null, $packagefacade_id = null, $course_id = null)
    {
        list($response) = $this->addBookingDetailWithHttpInfo($booking_id, $customer_id, $ticket_id, $session_id, $boatroom_id, $training_session_id, $temporary, $package_id, $packagefacade_id, $course_id);
        return $response;
    }

    /**
     * Operation addBookingDetailWithHttpInfo
     *
     * Add a package / course / ticket with its session to the booking
     *
     * @param int $booking_id  (required)
     * @param int $customer_id  (required)
     * @param int $ticket_id  (optional)
     * @param int $session_id  (optional)
     * @param int $boatroom_id  (optional)
     * @param int $training_session_id  (optional)
     * @param bool $temporary  (optional)
     * @param int $package_id  (optional)
     * @param int $packagefacade_id  (optional)
     * @param int $course_id  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addBookingDetailWithHttpInfo($booking_id, $customer_id, $ticket_id = null, $session_id = null, $boatroom_id = null, $training_session_id = null, $temporary = null, $package_id = null, $packagefacade_id = null, $course_id = null)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling addBookingDetail');
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling addBookingDetail');
        }
        // parse inputs
        $resourcePath = "/booking/add-detail";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }
        // query params
        if ($ticket_id !== null) {
            $queryParams['ticket_id'] = $this->apiClient->getSerializer()->toQueryValue($ticket_id);
        }
        // query params
        if ($session_id !== null) {
            $queryParams['session_id'] = $this->apiClient->getSerializer()->toQueryValue($session_id);
        }
        // query params
        if ($boatroom_id !== null) {
            $queryParams['boatroom_id'] = $this->apiClient->getSerializer()->toQueryValue($boatroom_id);
        }
        // query params
        if ($training_session_id !== null) {
            $queryParams['training_session_id'] = $this->apiClient->getSerializer()->toQueryValue($training_session_id);
        }
        // query params
        if ($temporary !== null) {
            $queryParams['temporary'] = $this->apiClient->getSerializer()->toQueryValue($temporary);
        }
        // query params
        if ($package_id !== null) {
            $queryParams['package_id'] = $this->apiClient->getSerializer()->toQueryValue($package_id);
        }
        // query params
        if ($packagefacade_id !== null) {
            $queryParams['packagefacade_id'] = $this->apiClient->getSerializer()->toQueryValue($packagefacade_id);
        }
        // query params
        if ($course_id !== null) {
            $queryParams['course_id'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20010',
                '/booking/add-detail'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20010', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20010', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation attachAccommodation
     *
     * Attach an accommodation booking to a booking
     *
     * @param int $booking_id  (required)
     * @param int $accommodation_id  (required)
     * @param int $customer_id  (required)
     * @param \DateTime $start  (optional)
     * @param \DateTime $end  (optional)
     * @return \Swagger\Client\Model\InlineResponse2008
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function attachAccommodation($booking_id, $accommodation_id, $customer_id, $start = null, $end = null)
    {
        list($response) = $this->attachAccommodationWithHttpInfo($booking_id, $accommodation_id, $customer_id, $start, $end);
        return $response;
    }

    /**
     * Operation attachAccommodationWithHttpInfo
     *
     * Attach an accommodation booking to a booking
     *
     * @param int $booking_id  (required)
     * @param int $accommodation_id  (required)
     * @param int $customer_id  (required)
     * @param \DateTime $start  (optional)
     * @param \DateTime $end  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function attachAccommodationWithHttpInfo($booking_id, $accommodation_id, $customer_id, $start = null, $end = null)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling attachAccommodation');
        }
        // verify the required parameter 'accommodation_id' is set
        if ($accommodation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accommodation_id when calling attachAccommodation');
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling attachAccommodation');
        }
        // parse inputs
        $resourcePath = "/booking/add-accommodation";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // query params
        if ($accommodation_id !== null) {
            $queryParams['accommodation_id'] = $this->apiClient->getSerializer()->toQueryValue($accommodation_id);
        }
        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2008',
                '/booking/add-accommodation'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2008', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2008', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation attachAddon
     *
     * Attach an addon to a trip of a booking
     *
     * @param int $booking_id  (required)
     * @param int $bookingdetail_id  (required)
     * @param int $addon_id  (required)
     * @param int $quantity  (optional)
     * @param int $packagefacade_id  (optional)
     * @return \Swagger\Client\Model\InlineResponse2009
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function attachAddon($booking_id, $bookingdetail_id, $addon_id, $quantity = null, $packagefacade_id = null)
    {
        list($response) = $this->attachAddonWithHttpInfo($booking_id, $bookingdetail_id, $addon_id, $quantity, $packagefacade_id);
        return $response;
    }

    /**
     * Operation attachAddonWithHttpInfo
     *
     * Attach an addon to a trip of a booking
     *
     * @param int $booking_id  (required)
     * @param int $bookingdetail_id  (required)
     * @param int $addon_id  (required)
     * @param int $quantity  (optional)
     * @param int $packagefacade_id  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function attachAddonWithHttpInfo($booking_id, $bookingdetail_id, $addon_id, $quantity = null, $packagefacade_id = null)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling attachAddon');
        }
        // verify the required parameter 'bookingdetail_id' is set
        if ($bookingdetail_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bookingdetail_id when calling attachAddon');
        }
        // verify the required parameter 'addon_id' is set
        if ($addon_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $addon_id when calling attachAddon');
        }
        // parse inputs
        $resourcePath = "/booking/add-addon";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // query params
        if ($bookingdetail_id !== null) {
            $queryParams['bookingdetail_id'] = $this->apiClient->getSerializer()->toQueryValue($bookingdetail_id);
        }
        // query params
        if ($addon_id !== null) {
            $queryParams['addon_id'] = $this->apiClient->getSerializer()->toQueryValue($addon_id);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['quantity'] = $this->apiClient->getSerializer()->toQueryValue($quantity);
        }
        // query params
        if ($packagefacade_id !== null) {
            $queryParams['packagefacade_id'] = $this->apiClient->getSerializer()->toQueryValue($packagefacade_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2009',
                '/booking/add-addon'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2009', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2009', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation attachPickup
     *
     * Attach a pickup location for a booking
     *
     * @param int $booking_id  (required)
     * @param string $location  (required)
     * @param \DateTime $date  (required)
     * @param string $time  (required)
     * @return \Swagger\Client\Model\InlineResponse20011
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function attachPickup($booking_id, $location, $date, $time)
    {
        list($response) = $this->attachPickupWithHttpInfo($booking_id, $location, $date, $time);
        return $response;
    }

    /**
     * Operation attachPickupWithHttpInfo
     *
     * Attach a pickup location for a booking
     *
     * @param int $booking_id  (required)
     * @param string $location  (required)
     * @param \DateTime $date  (required)
     * @param string $time  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse20011, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function attachPickupWithHttpInfo($booking_id, $location, $date, $time)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling attachPickup');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling attachPickup');
        }
        // verify the required parameter 'date' is set
        if ($date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $date when calling attachPickup');
        }
        // verify the required parameter 'time' is set
        if ($time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $time when calling attachPickup');
        }
        // parse inputs
        $resourcePath = "/booking/add-pickup";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($date !== null) {
            $queryParams['date'] = $this->apiClient->getSerializer()->toQueryValue($date);
        }
        // query params
        if ($time !== null) {
            $queryParams['time'] = $this->apiClient->getSerializer()->toQueryValue($time);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20011',
                '/booking/add-pickup'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20011', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20011', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cancelBooking
     *
     * Cancel a booking
     *
     * @param int $booking_id  (required)
     * @return \Swagger\Client\Model\InlineResponse2003
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelBooking($booking_id)
    {
        list($response) = $this->cancelBookingWithHttpInfo($booking_id);
        return $response;
    }

    /**
     * Operation cancelBookingWithHttpInfo
     *
     * Cancel a booking
     *
     * @param int $booking_id  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelBookingWithHttpInfo($booking_id)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling cancelBooking');
        }
        // parse inputs
        $resourcePath = "/booking/cancel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/booking/cancel'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation confirmBooking
     *
     * Confirm a booking and all of its sessions and notify the lead customer
     *
     * @param int $booking_id  (required)
     * @return \Swagger\Client\Model\InlineResponse20012
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function confirmBooking($booking_id)
    {
        list($response) = $this->confirmBookingWithHttpInfo($booking_id);
        return $response;
    }

    /**
     * Operation confirmBookingWithHttpInfo
     *
     * Confirm a booking and all of its sessions and notify the lead customer
     *
     * @param int $booking_id  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function confirmBookingWithHttpInfo($booking_id)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling confirmBooking');
        }
        // parse inputs
        $resourcePath = "/booking/confirm";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20012',
                '/booking/confirm'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20012', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20012', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBooking
     *
     * Delete a booking by ID
     *
     * @param int $id  (required)
     * @return \Swagger\Client\Model\InlineResponse2003
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteBooking($id)
    {
        list($response) = $this->deleteBookingWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteBookingWithHttpInfo
     *
     * Delete a booking by ID
     *
     * @param int $id  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteBookingWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteBooking');
        }
        // parse inputs
        $resourcePath = "/booking/delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/booking/delete'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dettachAccommodation
     *
     * Dettach an accommodation booking to a booking
     *
     * @param int $booking_id  (required)
     * @param int $accommodation_id  (required)
     * @param int $customer_id  (required)
     * @param \DateTime $start  (optional)
     * @return \Swagger\Client\Model\InlineResponse20017
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function dettachAccommodation($booking_id, $accommodation_id, $customer_id, $start = null)
    {
        list($response) = $this->dettachAccommodationWithHttpInfo($booking_id, $accommodation_id, $customer_id, $start);
        return $response;
    }

    /**
     * Operation dettachAccommodationWithHttpInfo
     *
     * Dettach an accommodation booking to a booking
     *
     * @param int $booking_id  (required)
     * @param int $accommodation_id  (required)
     * @param int $customer_id  (required)
     * @param \DateTime $start  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function dettachAccommodationWithHttpInfo($booking_id, $accommodation_id, $customer_id, $start = null)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling dettachAccommodation');
        }
        // verify the required parameter 'accommodation_id' is set
        if ($accommodation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accommodation_id when calling dettachAccommodation');
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling dettachAccommodation');
        }
        // parse inputs
        $resourcePath = "/booking/remove-accommodation";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // query params
        if ($accommodation_id !== null) {
            $queryParams['accommodation_id'] = $this->apiClient->getSerializer()->toQueryValue($accommodation_id);
        }
        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20017',
                '/booking/remove-accommodation'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20017', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20017', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dettachAddon
     *
     * Dettach an addon to a trip of a booking
     *
     * @param int $booking_id  (required)
     * @param int $bookingdetail_id  (required)
     * @param int $addon_id  (required)
     * @param int $packagefacade_id  (optional)
     * @return \Swagger\Client\Model\InlineResponse20017
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function dettachAddon($booking_id, $bookingdetail_id, $addon_id, $packagefacade_id = null)
    {
        list($response) = $this->dettachAddonWithHttpInfo($booking_id, $bookingdetail_id, $addon_id, $packagefacade_id);
        return $response;
    }

    /**
     * Operation dettachAddonWithHttpInfo
     *
     * Dettach an addon to a trip of a booking
     *
     * @param int $booking_id  (required)
     * @param int $bookingdetail_id  (required)
     * @param int $addon_id  (required)
     * @param int $packagefacade_id  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function dettachAddonWithHttpInfo($booking_id, $bookingdetail_id, $addon_id, $packagefacade_id = null)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling dettachAddon');
        }
        // verify the required parameter 'bookingdetail_id' is set
        if ($bookingdetail_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bookingdetail_id when calling dettachAddon');
        }
        // verify the required parameter 'addon_id' is set
        if ($addon_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $addon_id when calling dettachAddon');
        }
        // parse inputs
        $resourcePath = "/booking/remove-addon";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // query params
        if ($bookingdetail_id !== null) {
            $queryParams['bookingdetail_id'] = $this->apiClient->getSerializer()->toQueryValue($bookingdetail_id);
        }
        // query params
        if ($addon_id !== null) {
            $queryParams['addon_id'] = $this->apiClient->getSerializer()->toQueryValue($addon_id);
        }
        // query params
        if ($packagefacade_id !== null) {
            $queryParams['packagefacade_id'] = $this->apiClient->getSerializer()->toQueryValue($packagefacade_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20017',
                '/booking/remove-addon'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20017', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20017', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dettachPickup
     *
     * Dettach a pickup location for a booking
     *
     * @param int $booking_id  (required)
     * @param int $id  (optional)
     * @return \Swagger\Client\Model\InlineResponse2003
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function dettachPickup($booking_id, $id = null)
    {
        list($response) = $this->dettachPickupWithHttpInfo($booking_id, $id);
        return $response;
    }

    /**
     * Operation dettachPickupWithHttpInfo
     *
     * Dettach a pickup location for a booking
     *
     * @param int $booking_id  (required)
     * @param int $id  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function dettachPickupWithHttpInfo($booking_id, $id = null)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling dettachPickup');
        }
        // parse inputs
        $resourcePath = "/booking/remove-pickup";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/booking/remove-pickup'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation editBookingInfo
     *
     * Edit the information related to a booking
     *
     * @param int $booking_id  (optional)
     * @param double $discount  (optional)
     * @param string $comment  (optional)
     * @return \Swagger\Client\Model\InlineResponse20014
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function editBookingInfo($booking_id = null, $discount = null, $comment = null)
    {
        list($response) = $this->editBookingInfoWithHttpInfo($booking_id, $discount, $comment);
        return $response;
    }

    /**
     * Operation editBookingInfoWithHttpInfo
     *
     * Edit the information related to a booking
     *
     * @param int $booking_id  (optional)
     * @param double $discount  (optional)
     * @param string $comment  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20014, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function editBookingInfoWithHttpInfo($booking_id = null, $discount = null, $comment = null)
    {
        // parse inputs
        $resourcePath = "/booking/edit-info";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // query params
        if ($discount !== null) {
            $queryParams['discount'] = $this->apiClient->getSerializer()->toQueryValue($discount);
        }
        // query params
        if ($comment !== null) {
            $queryParams['comment'] = $this->apiClient->getSerializer()->toQueryValue($comment);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20014',
                '/booking/edit-info'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20014', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20014', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation filterBookings
     *
     * Get all bookings matching a filter
     *
     * @param string $reference  (optional)
     * @param \DateTime $date  (optional)
     * @param string $lastname  (optional)
     * @return \Swagger\Client\Model\InlineResponse20013
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function filterBookings($reference = null, $date = null, $lastname = null)
    {
        list($response) = $this->filterBookingsWithHttpInfo($reference, $date, $lastname);
        return $response;
    }

    /**
     * Operation filterBookingsWithHttpInfo
     *
     * Get all bookings matching a filter
     *
     * @param string $reference  (optional)
     * @param \DateTime $date  (optional)
     * @param string $lastname  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function filterBookingsWithHttpInfo($reference = null, $date = null, $lastname = null)
    {
        // parse inputs
        $resourcePath = "/booking/filter";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($reference !== null) {
            $queryParams['reference'] = $this->apiClient->getSerializer()->toQueryValue($reference);
        }
        // query params
        if ($date !== null) {
            $queryParams['date'] = $this->apiClient->getSerializer()->toQueryValue($date);
        }
        // query params
        if ($lastname !== null) {
            $queryParams['lastname'] = $this->apiClient->getSerializer()->toQueryValue($lastname);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20013',
                '/booking/filter'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20013', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllBookings
     *
     * Retrieve all bookings
     *
     * @return \Swagger\Client\Model\Booking[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllBookings()
    {
        list($response) = $this->getAllBookingsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllBookingsWithHttpInfo
     *
     * Retrieve all bookings
     *
     * @return Array of \Swagger\Client\Model\Booking[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllBookingsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/booking/all";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Booking[]',
                '/booking/all'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Booking[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Booking[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllWithTrashedBookings
     *
     * Retrieve all bookings including any deleted models
     *
     * @return \Swagger\Client\Model\Booking[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithTrashedBookings()
    {
        list($response) = $this->getAllWithTrashedBookingsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllWithTrashedBookingsWithHttpInfo
     *
     * Retrieve all bookings including any deleted models
     *
     * @return Array of \Swagger\Client\Model\Booking[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithTrashedBookingsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/booking/all-with-trashed";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Booking[]',
                '/booking/all-with-trashed'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Booking[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Booking[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBooking
     *
     * Retrieve a booking by ID
     *
     * @param int $id  (required)
     * @return \Swagger\Client\Model\InlineResponse2007
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBooking($id)
    {
        list($response) = $this->getBookingWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getBookingWithHttpInfo
     *
     * Retrieve a booking by ID
     *
     * @param int $id  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBookingWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getBooking');
        }
        // parse inputs
        $resourcePath = "/booking";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2007',
                '/booking'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2007', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomerBookings
     *
     * Get all bookings for a customer
     *
     * @param int $customer_id  (required)
     * @return \Swagger\Client\Model\InlineResponse20013
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomerBookings($customer_id)
    {
        list($response) = $this->getCustomerBookingsWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation getCustomerBookingsWithHttpInfo
     *
     * Get all bookings for a customer
     *
     * @param int $customer_id  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomerBookingsWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling getCustomerBookings');
        }
        // parse inputs
        $resourcePath = "/booking/customer";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20013',
                '/booking/customer'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20013', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPayments
     *
     * Retrieve all payments made for a booking
     *
     * @param int $booking_id  (optional)
     * @return \Swagger\Client\Model\InlineResponse20015
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPayments($booking_id = null)
    {
        list($response) = $this->getPaymentsWithHttpInfo($booking_id);
        return $response;
    }

    /**
     * Operation getPaymentsWithHttpInfo
     *
     * Retrieve all payments made for a booking
     *
     * @param int $booking_id  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPaymentsWithHttpInfo($booking_id = null)
    {
        // parse inputs
        $resourcePath = "/booking/payments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20015',
                '/booking/payments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20015', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20015', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRefunds
     *
     * Retrieve all refunds for a booking
     *
     * @param int $booking_id  (optional)
     * @return \Swagger\Client\Model\InlineResponse20016
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getRefunds($booking_id = null)
    {
        list($response) = $this->getRefundsWithHttpInfo($booking_id);
        return $response;
    }

    /**
     * Operation getRefundsWithHttpInfo
     *
     * Retrieve all refunds for a booking
     *
     * @param int $booking_id  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20016, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getRefundsWithHttpInfo($booking_id = null)
    {
        // parse inputs
        $resourcePath = "/booking/refunds";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20016',
                '/booking/refunds'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20016', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20016', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTodaysBookings
     *
     * Get all bookings made today
     *
     * @return \Swagger\Client\Model\InlineResponse20013
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTodaysBookings()
    {
        list($response) = $this->getTodaysBookingsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getTodaysBookingsWithHttpInfo
     *
     * Get all bookings made today
     *
     * @return Array of \Swagger\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTodaysBookingsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/booking/today";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20013',
                '/booking/today'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20013', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTommorowsBookings
     *
     * Get all bookings made today
     *
     * @return \Swagger\Client\Model\InlineResponse20013
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTommorowsBookings()
    {
        list($response) = $this->getTommorowsBookingsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getTommorowsBookingsWithHttpInfo
     *
     * Get all bookings made today
     *
     * @return Array of \Swagger\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTommorowsBookingsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/booking/tommorow";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20013',
                '/booking/tommorow'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20013', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation initBooking
     *
     * Create a new empty booking
     *
     * @param string $source  (required)
     * @param int $agent_id  (optional)
     * @param string $agent_reference  (optional)
     * @return \Swagger\Client\Model\InlineResponse201
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function initBooking($source, $agent_id = null, $agent_reference = null)
    {
        list($response) = $this->initBookingWithHttpInfo($source, $agent_id, $agent_reference);
        return $response;
    }

    /**
     * Operation initBookingWithHttpInfo
     *
     * Create a new empty booking
     *
     * @param string $source  (required)
     * @param int $agent_id  (optional)
     * @param string $agent_reference  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse201, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function initBookingWithHttpInfo($source, $agent_id = null, $agent_reference = null)
    {
        // verify the required parameter 'source' is set
        if ($source === null) {
            throw new \InvalidArgumentException('Missing the required parameter $source when calling initBooking');
        }
        // parse inputs
        $resourcePath = "/booking/init";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($source !== null) {
            $queryParams['source'] = $this->apiClient->getSerializer()->toQueryValue($source);
        }
        // query params
        if ($agent_id !== null) {
            $queryParams['agent_id'] = $this->apiClient->getSerializer()->toQueryValue($agent_id);
        }
        // query params
        if ($agent_reference !== null) {
            $queryParams['agent_reference'] = $this->apiClient->getSerializer()->toQueryValue($agent_reference);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse201',
                '/booking/init'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse201', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse201', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeBookingDetail
     *
     * Remove a detail from a booking
     *
     * @param int $booking_id  (required)
     * @param int $bookingdetail_id  (required)
     * @return \Swagger\Client\Model\InlineResponse20017
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removeBookingDetail($booking_id, $bookingdetail_id)
    {
        list($response) = $this->removeBookingDetailWithHttpInfo($booking_id, $bookingdetail_id);
        return $response;
    }

    /**
     * Operation removeBookingDetailWithHttpInfo
     *
     * Remove a detail from a booking
     *
     * @param int $booking_id  (required)
     * @param int $bookingdetail_id  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removeBookingDetailWithHttpInfo($booking_id, $bookingdetail_id)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling removeBookingDetail');
        }
        // verify the required parameter 'bookingdetail_id' is set
        if ($bookingdetail_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bookingdetail_id when calling removeBookingDetail');
        }
        // parse inputs
        $resourcePath = "/booking/remove-detail";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // query params
        if ($bookingdetail_id !== null) {
            $queryParams['bookingdetail_id'] = $this->apiClient->getSerializer()->toQueryValue($bookingdetail_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20017',
                '/booking/remove-detail'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20017', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20017', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resendConfirmation
     *
     * Resend the confirmation email to the lead customer
     *
     * @param int $booking_id  (required)
     * @return \Swagger\Client\Model\InlineResponse2003
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resendConfirmation($booking_id)
    {
        list($response) = $this->resendConfirmationWithHttpInfo($booking_id);
        return $response;
    }

    /**
     * Operation resendConfirmationWithHttpInfo
     *
     * Resend the confirmation email to the lead customer
     *
     * @param int $booking_id  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resendConfirmationWithHttpInfo($booking_id)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling resendConfirmation');
        }
        // parse inputs
        $resourcePath = "/booking/resend-confirmation";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/booking/resend-confirmation'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reserveBooking
     *
     * Reserve a booking and its sessions capcity until a set date
     *
     * @param int $booking_id  (required)
     * @param \DateTime $reserved_until  (optional)
     * @return \Swagger\Client\Model\InlineResponse20018
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function reserveBooking($booking_id, $reserved_until = null)
    {
        list($response) = $this->reserveBookingWithHttpInfo($booking_id, $reserved_until);
        return $response;
    }

    /**
     * Operation reserveBookingWithHttpInfo
     *
     * Reserve a booking and its sessions capcity until a set date
     *
     * @param int $booking_id  (required)
     * @param \DateTime $reserved_until  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20018, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function reserveBookingWithHttpInfo($booking_id, $reserved_until = null)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling reserveBooking');
        }
        // parse inputs
        $resourcePath = "/booking/reserve";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // query params
        if ($reserved_until !== null) {
            $queryParams['reserved_until'] = $this->apiClient->getSerializer()->toQueryValue($reserved_until);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20018',
                '/booking/reserve'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20018', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20018', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation saveBooking
     *
     * Save a booking as a quote and release all capacity of sessions
     *
     * @param int $booking_id  (required)
     * @return \Swagger\Client\Model\InlineResponse2003
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveBooking($booking_id)
    {
        list($response) = $this->saveBookingWithHttpInfo($booking_id);
        return $response;
    }

    /**
     * Operation saveBookingWithHttpInfo
     *
     * Save a booking as a quote and release all capacity of sessions
     *
     * @param int $booking_id  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveBookingWithHttpInfo($booking_id)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling saveBooking');
        }
        // parse inputs
        $resourcePath = "/booking/save";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/booking/save'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setLeadCustomer
     *
     * Set the lead customer for a booking
     *
     * @param int $booking_id  (required)
     * @param int $customer_id  (required)
     * @return \Swagger\Client\Model\InlineResponse2003
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function setLeadCustomer($booking_id, $customer_id)
    {
        list($response) = $this->setLeadCustomerWithHttpInfo($booking_id, $customer_id);
        return $response;
    }

    /**
     * Operation setLeadCustomerWithHttpInfo
     *
     * Set the lead customer for a booking
     *
     * @param int $booking_id  (required)
     * @param int $customer_id  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function setLeadCustomerWithHttpInfo($booking_id, $customer_id)
    {
        // verify the required parameter 'booking_id' is set
        if ($booking_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $booking_id when calling setLeadCustomer');
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling setLeadCustomer');
        }
        // parse inputs
        $resourcePath = "/booking/set-lead";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($booking_id !== null) {
            $queryParams['booking_id'] = $this->apiClient->getSerializer()->toQueryValue($booking_id);
        }
        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/booking/set-lead'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
