<?php
/**
 * CompanyApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Scubawhere API Documentation
 *
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * CompanyApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://dev.scubawhere.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CompanyApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation attachLocations
     *
     * Attach a location to a company
     *
     * @param string $name  (optional)
     * @param string $description  (optional)
     * @param float $latitude  (optional)
     * @param float $longitude  (optional)
     * @return \Swagger\Client\Model\InlineResponse20023
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function attachLocations($name = null, $description = null, $latitude = null, $longitude = null)
    {
        list($response) = $this->attachLocationsWithHttpInfo($name, $description, $latitude, $longitude);
        return $response;
    }

    /**
     * Operation attachLocationsWithHttpInfo
     *
     * Attach a location to a company
     *
     * @param string $name  (optional)
     * @param string $description  (optional)
     * @param float $latitude  (optional)
     * @param float $longitude  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20023, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function attachLocationsWithHttpInfo($name = null, $description = null, $latitude = null, $longitude = null)
    {
        // parse inputs
        $resourcePath = "/company/add-location";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = $this->apiClient->getSerializer()->toQueryValue($latitude);
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = $this->apiClient->getSerializer()->toQueryValue($longitude);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20023',
                '/company/add-location'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20023', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20023', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLocations
     *
     * Retrieve the locations this Dive Centre uses
     *
     * @param string $latitude  (required)
     * @param string $longitude  (required)
     * @param int $limit  (optional)
     * @return \Swagger\Client\Model\InlineResponse20024
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLocations($latitude, $longitude, $limit = null)
    {
        list($response) = $this->getLocationsWithHttpInfo($latitude, $longitude, $limit);
        return $response;
    }

    /**
     * Operation getLocationsWithHttpInfo
     *
     * Retrieve the locations this Dive Centre uses
     *
     * @param string $latitude  (required)
     * @param string $longitude  (required)
     * @param int $limit  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20024, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLocationsWithHttpInfo($latitude, $longitude, $limit = null)
    {
        // verify the required parameter 'latitude' is set
        if ($latitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $latitude when calling getLocations');
        }
        // verify the required parameter 'longitude' is set
        if ($longitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $longitude when calling getLocations');
        }
        // parse inputs
        $resourcePath = "/company/locations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = $this->apiClient->getSerializer()->toQueryValue($latitude);
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = $this->apiClient->getSerializer()->toQueryValue($longitude);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20024',
                '/company/locations'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20024', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20024', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPickupSchedule
     *
     * Retrieve the pick up schedule for a date
     *
     * @param string $date  (required)
     * @return \Swagger\Client\Model\InlineResponse20025
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPickupSchedule($date)
    {
        list($response) = $this->getPickupScheduleWithHttpInfo($date);
        return $response;
    }

    /**
     * Operation getPickupScheduleWithHttpInfo
     *
     * Retrieve the pick up schedule for a date
     *
     * @param string $date  (required)
     * @return Array of \Swagger\Client\Model\InlineResponse20025, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPickupScheduleWithHttpInfo($date)
    {
        // verify the required parameter 'date' is set
        if ($date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $date when calling getPickupSchedule');
        }
        // parse inputs
        $resourcePath = "/company/pick-up-schedule";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($date !== null) {
            $queryParams['date'] = $this->apiClient->getSerializer()->toQueryValue($date);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20025',
                '/company/pick-up-schedule'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20025', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20025', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCompany
     *
     * Update the companies information
     *
     * @param int $id  (required)
     * @param string $contact  (optional)
     * @param string $description  (optional)
     * @param string $name  (optional)
     * @param string $address_1  (optional)
     * @param string $address_2  (optional)
     * @param string $city  (optional)
     * @param string $county  (optional)
     * @param string $postcode  (optional)
     * @param int $country_id  (optional)
     * @param int $currency_id  (optional)
     * @param string $business_phone  (optional)
     * @param string $business_email  (optional)
     * @param string $vat_number  (optional)
     * @param string $registration_number  (optional)
     * @param string $website  (optional)
     * @return \Swagger\Client\Model\InlineResponse20026
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateCompany($id, $contact = null, $description = null, $name = null, $address_1 = null, $address_2 = null, $city = null, $county = null, $postcode = null, $country_id = null, $currency_id = null, $business_phone = null, $business_email = null, $vat_number = null, $registration_number = null, $website = null)
    {
        list($response) = $this->updateCompanyWithHttpInfo($id, $contact, $description, $name, $address_1, $address_2, $city, $county, $postcode, $country_id, $currency_id, $business_phone, $business_email, $vat_number, $registration_number, $website);
        return $response;
    }

    /**
     * Operation updateCompanyWithHttpInfo
     *
     * Update the companies information
     *
     * @param int $id  (required)
     * @param string $contact  (optional)
     * @param string $description  (optional)
     * @param string $name  (optional)
     * @param string $address_1  (optional)
     * @param string $address_2  (optional)
     * @param string $city  (optional)
     * @param string $county  (optional)
     * @param string $postcode  (optional)
     * @param int $country_id  (optional)
     * @param int $currency_id  (optional)
     * @param string $business_phone  (optional)
     * @param string $business_email  (optional)
     * @param string $vat_number  (optional)
     * @param string $registration_number  (optional)
     * @param string $website  (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20026, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateCompanyWithHttpInfo($id, $contact = null, $description = null, $name = null, $address_1 = null, $address_2 = null, $city = null, $county = null, $postcode = null, $country_id = null, $currency_id = null, $business_phone = null, $business_email = null, $vat_number = null, $registration_number = null, $website = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateCompany');
        }
        // parse inputs
        $resourcePath = "/company/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($contact !== null) {
            $queryParams['contact'] = $this->apiClient->getSerializer()->toQueryValue($contact);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($address_1 !== null) {
            $queryParams['address_1'] = $this->apiClient->getSerializer()->toQueryValue($address_1);
        }
        // query params
        if ($address_2 !== null) {
            $queryParams['address_2'] = $this->apiClient->getSerializer()->toQueryValue($address_2);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = $this->apiClient->getSerializer()->toQueryValue($city);
        }
        // query params
        if ($county !== null) {
            $queryParams['county'] = $this->apiClient->getSerializer()->toQueryValue($county);
        }
        // query params
        if ($postcode !== null) {
            $queryParams['postcode'] = $this->apiClient->getSerializer()->toQueryValue($postcode);
        }
        // query params
        if ($country_id !== null) {
            $queryParams['country_id'] = $this->apiClient->getSerializer()->toQueryValue($country_id);
        }
        // query params
        if ($currency_id !== null) {
            $queryParams['currency_id'] = $this->apiClient->getSerializer()->toQueryValue($currency_id);
        }
        // query params
        if ($business_phone !== null) {
            $queryParams['business_phone'] = $this->apiClient->getSerializer()->toQueryValue($business_phone);
        }
        // query params
        if ($business_email !== null) {
            $queryParams['business_email'] = $this->apiClient->getSerializer()->toQueryValue($business_email);
        }
        // query params
        if ($vat_number !== null) {
            $queryParams['vat_number'] = $this->apiClient->getSerializer()->toQueryValue($vat_number);
        }
        // query params
        if ($registration_number !== null) {
            $queryParams['registration_number'] = $this->apiClient->getSerializer()->toQueryValue($registration_number);
        }
        // query params
        if ($website !== null) {
            $queryParams['website'] = $this->apiClient->getSerializer()->toQueryValue($website);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse20026',
                '/company/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse20026', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20026', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
